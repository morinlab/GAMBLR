% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/database.R
\name{get_sample_cn_segments}
\alias{get_sample_cn_segments}
\title{GetSample CN Segments.}
\usage{
get_sample_cn_segments(
  this_sample_id,
  multiple_samples = FALSE,
  sample_list,
  from_flatfile = TRUE,
  projection = "grch37",
  this_seq_type = "genome",
  with_chr_prefix = FALSE,
  streamlined = FALSE
)
}
\arguments{
\item{this_sample_id}{Optional argument, single sample_id for the sample to retrieve segments for.}

\item{multiple_samples}{Set to TRUE to return cn segments for multiple samples specified in \code{samples_list} parameter. Default is FALSE.}

\item{sample_list}{Optional vector of type character with one sample per row, required if multiple_samples is set to TRUE.}

\item{from_flatfile}{Set to TRUE by default.}

\item{projection}{Selected genome projection for returned CN segments. Default is "grch37".}

\item{this_seq_type}{Seq type for returned CN segments. One of "genome" (default) or "capture".}

\item{with_chr_prefix}{Set to TRUE to add a chr prefix to chromosome names. Default is FALSE.}

\item{streamlined}{Return a minimal output rather than full details. Default is FALSE.}
}
\value{
A data frame of segments for a specific or multiple sample ID(s).
}
\description{
Get all segments for a single (or multiple) sample_id(s).
}
\details{
This function returns CN segments for samples. This works for single sample or multiple samples.
For multiple samples, remember to set the Boolean parameter \code{multiple_samples = TRUE} and give the \code{sample_lsit} a vector of characters with one sample ID per row.
For more information on how this function can be run in different ways, refer to the parameter descriptions, examples and vignettes.
Is this function not what you are looking for? Try one of the following, similar, functions; \link{assign_cn_to_ssm}, \link{get_cn_segments}, \link{get_cn_states},
}
\examples{
# Return cn segments for multiple samples (read csv with one sample per line):
sample_list = readLines("../samples-test.csv")
multiple_samples = get_sample_cn_segments(multiple_samples = TRUE, sample_list = sample_list)
#Return cn segments for multiple samples (provided as vector of sample IDs):
these_sample_list = c("00-15201_tumorA", "00-15201_tumorB")

samples = get_sample_cn_segments(multiple_samples = TRUE, 
                                 sample_list = these_sample_list)
# For capture
samples = get_sample_cn_segments(
 multiple_samples = TRUE, 
 sample_list = these_sample_list,
 this_seq_type = "capture"
)

}
