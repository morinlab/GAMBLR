% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/viz.R
\name{prettyOncoplot}
\alias{prettyOncoplot}
\title{Oncooplot}
\usage{
prettyOncoplot(
  maftools_obj,
  onco_matrix_path,
  genes,
  include_noncoding = NULL,
  keepGeneOrder = FALSE,
  keepSampleOrder = TRUE,
  highlightHotspots = FALSE,
  these_samples_metadata,
  metadataColumns,
  numericMetadataColumns,
  expressionColumns = c(),
  numericMetadataMax,
  sortByColumns,
  arrange_descending = FALSE,
  removeNonMutated = FALSE,
  minMutationPercent,
  mutAlpha = 1,
  recycleOncomatrix = FALSE,
  splitColumnName,
  splitGeneGroups,
  showTumorSampleBarcode = FALSE,
  groupNames,
  hide_annotations,
  annotate_specific_genes = FALSE,
  this_forest_object = NULL,
  custom_colours = NULL,
  hideTopBarplot = TRUE,
  tally_all_mutations = FALSE,
  tally_all_mutations_max = 1000,
  hideSideBarplot = FALSE,
  box_col = NA,
  annoAlpha = 1,
  legend_direction = "horizontal",
  ylim = NULL,
  legend_position = "bottom",
  legend_row = 3,
  legend_col = 3,
  metadataBarHeight = 1.5,
  metadataBarFontsize = 5,
  legendFontSize = 10,
  fontSizeGene = 6,
  annotation_row = 2,
  annotation_col = 1,
  verbose = FALSE
)
}
\arguments{
\item{maftools_obj}{A maftools object containing the mutations you want to plot.}

\item{onco_matrix_path}{Provide a path to an onco_matrix file instead of a MAF object if the former is unavailable (this limits functionality a bit).}

\item{genes}{An optional vector of genes to restrict your plot to.}

\item{include_noncoding}{List of non-coding regions to be included, default is NULL. Specify like this: include_noncoding=list("NFKBIZ" = c("3'UTR"), "HNRNPH1" = "Splice_Region")}

\item{keepGeneOrder}{Set to TRUE if you want to preserve the gene order specified.}

\item{keepSampleOrder}{Set to TRUE if you want to preserve the sample order specified.}

\item{highlightHotspots}{Set to TRUE to highlight hot spots. Default is FALSE.}

\item{these_samples_metadata}{Data frame containing metadata for your samples.}

\item{metadataColumns}{A vector containing the categorical column names you want to plot below.}

\item{numericMetadataColumns}{A vector containing the numeric columns you want to plot below.}

\item{expressionColumns}{Optional variable for retreiving expression values for a specific gene(s).}

\item{numericMetadataMax}{A numeric vector of cutoffs to apply to numeric columns above.}

\item{sortByColumns}{A vector containing the column names you want to sort columns (patients) on.}

\item{arrange_descending}{A Boolean parameter. Set to TRUE to sort metadata in descending fashion. Default is FALSE.}

\item{removeNonMutated}{Set to TRUE to drop unmutated cases.}

\item{minMutationPercent}{Only genes mutated in more than minMutationPercent \% patients will be included.}

\item{mutAlpha}{Optional alpha to apply to mutation colours.}

\item{recycleOncomatrix}{Set to TRUE most of the time to reuse the oncomatrix saved by maftools.}

\item{splitColumnName}{Optional argument to indicate which metadata column to split on. Default is set to pathology.}

\item{splitGeneGroups}{Split genes into groups for better seperation (between different gene-groups) in prettyOncoplot.}

\item{showTumorSampleBarcode}{Optional argument for showing tumor barcode. Default is FALSE.}

\item{groupNames}{optional vector of group names to be displayed above heatmap. Should be the same length as the number of groups that will be shown. Default is NULL (no labels).}

\item{hide_annotations}{Hide annotations for specifc ashms. argument takes a list with annotations.}

\item{annotate_specific_genes}{Optional argument, specifying whether the features should be labelled according to their significance in one of the pathologies. Default is FALSE (no annotation).}

\item{this_forest_object}{If annotate_specific_genes is specified, this arguments takes the output of GAMBLR::prettyForestPlot directly to determine the annotations.}

\item{custom_colours}{Provide named vector (or named list of vectors) containing custom annotation colours if you do not want to use standartized pallette.}

\item{hideTopBarplot}{Optional argument for removing top bar plot. Default value is TRUE.}

\item{tally_all_mutations}{Optional argument. Set to TRUE to tally all mutations. Default is FALSE.}

\item{tally_all_mutations_max}{Optional argument. Default is 1000.}

\item{hideSideBarplot}{Optional argument for removing side bar plot. Default value is FALSE.}

\item{box_col}{Colour of boxes for outlining mutations (can be problematic with larger oncoprints).}

\item{annoAlpha}{Optional alpha to apply to annotation colours.}

\item{legend_direction}{Direction of lgend, defualt is "horizontal".}

\item{ylim}{Limit for y-axis.}

\item{legend_position}{Position of legend, default is "bottom".}

\item{legend_row}{Fiddle with these to widen or narrow your legend.}

\item{legend_col}{Fiddle with these to widen or narrow your legend.}

\item{metadataBarHeight}{Optional argument to adjust the height of bar with annotations. The default is 1.5.}

\item{metadataBarFontsize}{Optional argument to control for the font size of metadata annotations. The default is 5.}

\item{legendFontSize}{Font size for legend, default is 10.}

\item{fontSizeGene}{Font size for gene labels (default 6).}

\item{annotation_row}{Row for annotations, default is 2.}

\item{annotation_col}{Column for annotations, default is 1.}

\item{verbose}{Set to TRUE to enable verbose mode (debugging messages.}
}
\value{
Nothing
}
\description{
Create a highly customizable oncoplot.
}
\details{
Make an oncoplot that is pretty using ComplexHeatmap. The metadata is expected to follow the structure and column naming used in GAMBL.
If you provide your own non-GAMBL samples and metadata, you must include at least the following columns with these names.
The first one should match the Tumor_Sample_Barcode in the MAF object or onco_matrix you provide.
sample_id, pathology
}
\examples{
#get some data
maf_data = get_coding_ssm(seq_type = "genome")
maf_metadata = get_gambl_metadata()
maf = read.maf(maf_data, clinicalData = maf_metadata)

#define some genes of interest
bl_genes = c("NFKBIZ", "ID3", "TP53", "ARID1A", "FBXO11", 
             "GNA13", "TCF3", "TFAP4", "HNRNPU", "FOXO1",
             "CCND3", "SMARCA4", "DDX3X")

dlbcl_genes = c("EZH2", "KMT2D", "MEF2B", "CREBBP", "MYD88")

genes = c(bl_genes, dlbcl_genes)

#define gene groups
gene_groups = c(rep("BL", length(bl_genes)), rep("DLBCL", length(dlbcl_genes)))
names(gene_groups) = genes

#filter metadata
maf_metadata = dplyr::filter(maf_metadata,!lymphgen \%in\% c("COMPOSITE"))

#convert metadata column into factor
maf_metadata$pathology = as.factor(maf_metadata$pathology)

#define order of factors for selected metadata column
maf_metadata$pathology = factor(maf_metadata$pathology, 
                                levels = c("DLBCL", "BL",
                                           "B-ALL", "CLL",
                                           "COMFL", "DLBCL-BL-like",
                                           "FL", "HGBL",
                                           "MCL", "PBL",
                                           "SCBC", "UNSPECIFIED"))

maf_metadata = with(maf_metadata, maf_metadata[order(pathology),])

#create prettyOncoplot
prettyOncoplot(maftools_obj = maf,
               genes = genes,
               these_samples_metadata = maf_metadata,
               splitGeneGroups = gene_groups,
               keepGeneOrder = TRUE,
               splitColumnName = "pathology",
               metadataBarHeight = 5,
               metadataBarFontsize = 8, 
               legend_row = 2,
               fontSizeGene = 11,
               metadataColumns = c("pathology", "lymphgen", "sex", "EBV_status_inf", "cohort"),
               sortByColumns = c("pathology", "lymphgen", "sex", "EBV_status_inf", "cohort"))

}
