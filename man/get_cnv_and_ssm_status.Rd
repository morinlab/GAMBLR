% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities.R
\name{get_cnv_and_ssm_status}
\alias{get_cnv_and_ssm_status}
\title{Get CNV and coding SSM combined status}
\usage{
get_cnv_and_ssm_status(
  genes_and_cn_threshs,
  these_samples_metadata,
  seq_type = "genome",
  only_cnv = "none",
  genome_build = "grch37",
  from_flatfile = TRUE,
  include_hotspots = TRUE,
  review_hotspots = TRUE,
  subset_from_merge = FALSE,
  augmented = TRUE,
  min_read_support_ssm = 3
)
}
\arguments{
\item{genes_and_cn_threshs}{A data frame with columns "gene_id" and "cn_thresh". The "gene_id" column stores
gene symbols (characters) which determine the regions to return CNV and/or coding SSM status. The "cn_thresh"
column stores integers that mean the maximum or minimum CN states to return status 1 (contains CNV) for
its respective gene. If this integer is below 2 (neutral CN state for diploids), it is taken as the maximum
(gene consider as tumor suppressor); if above 2, it is the minimum (oncogene); if equal to 2, do not consider
CNV to return status.}

\item{these_samples_metadata}{The metadata for samples of interest to be included in the returned matrix.
Can be created with \code{get_gambl_metadata} function.}

\item{seq_type}{The seq type to get results for. Possible values are "genome" (default) or "capture".}

\item{only_cnv}{A vector of gene names indicating the genes for which only CNV status should be considered,
ignoring SSM status. Set this argument to "all" or "none" (default) to apply this behavior to all or none
of the genes, respectively.}

\item{genome_build}{Reference genome build. Possible values are "grch37" (default) or "grch38".}

\item{from_flatfile}{Logical parameter indicating whether to use flat file to retrieve mutations. Set to FALSE
to use database instead. Default is TRUE.}

\item{include_hotspots}{Logical parameter indicating whether hotspots object should also be tabulated. Default is TRUE.}

\item{review_hotspots}{Logical parameter indicating whether hotspots object should be reviewed to include
functionally relevant mutations or rare lymphoma-related genes. Default is TRUE.}

\item{subset_from_merge}{Argument to internally pass to \code{get_ssm_by_samples} function. If set to TRUE,
the data will be subset from a pre-merged MAF of samples with the specified seq_type, Instead of merging
individual MAFs. Default is FALSE.}

\item{augmented}{Argument to internally pass to the functions \code{get_ssm_by_samples} and \code{get_coding_ssm_status}.
A logical parameter (default: TRUE). Set to FALSE to use multi-sample patients, instead of the original MAF
from each sample.}

\item{min_read_support_ssm}{Only consider SSMs with at least this many reads in t_alt_count (for cleaning
up augmented MAFs).}
}
\value{
A data frame with CNV and SSM combined status.
}
\description{
For each specified chromosome region (gene name), return status 1 if the copy number (CN)
state is non-neutral, \emph{i.e.} different from 2, or if the region contains any coding simple somatic mutation (SSM).
}
\details{
The user can choose from which regions are intended to return only copy number variation (CNV) status,
only coding SSM status, or at least the presence of one of them. This behavior is controlled by the arguments
\code{genes_and_cn_threshs} (column \code{cn_thresh}) and \code{only_cnv}.

This function internally calls the \code{get_cn_states}, \code{get_ssm_by_samples} and \code{get_coding_ssm_status}functions.
Therefore, many of its arguments are assigned to these functions. If needed, see the documentation of these
functions for more information.

In the case of returning NA values, this is because the \code{get_cn_segments} function can not internally return
any copy number segments from a given chromosome region.
}
\examples{
# Define samples
these_sample_ids = c(
  "BLGSP-71-06-00160-01A-03D",
  "BLGSP-71-06-00252-01A-01D",
  "BLGSP-71-19-00122-09A.1-01D",
  "BLGSP-71-19-00523-09A-01D",
  "BLGSP-71-21-00187-01A-01E",
  "BLGSP-71-21-00188-01A-04E"
)

# Get sample meta data
this_meta = get_gambl_metadata()
this_meta = dplyr::filter(this_meta, sample_id \%in\% these_sample_ids)

# For MYC and SYNCRIP, return CNV and SSM combined status; for MIR17HG, 
# return only CNV status; for CCND3 return only SSM status
genes_and_cn_threshs = data.frame(
  gene_id=c("MYC", "MIR17HG", "CCND3", "SYNCRIP"),
  cn_thresh=c(3, 3, 2, 1)
)
get_cnv_and_ssm_status(
  genes_and_cn_threshs,
  this_meta,
  only_cnv = "MIR17HG",
)

# For all genes, return only CNV status
genes_and_cn_threshs = data.frame(
  gene_id=c("MYC", "MIR17HG", "SYNCRIP"),
  cn_thresh=c(3, 3, 1)
)
get_cnv_and_ssm_status(
  genes_and_cn_threshs,
  this_meta,
  only_cnv = "all",
)

}
