% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/viz.R
\name{fancy_alignment_plot}
\alias{fancy_alignment_plot}
\title{Visualize (stacked barplot) genomic read-subsets across a selection of samples.}
\usage{
fancy_alignment_plot(
  these_sample_ids,
  metadata,
  these_samples_metadata,
  comparison_group,
  seq_type = "genome",
  add_mean = TRUE,
  add_corrected_coverage = TRUE,
  keep_cohort,
  keep_pathology,
  this_color_palette = c(TotalReads = "#3D405B", TotalUniquelyMapped = "#81B29A",
    TotalDuplicatedreads = "#E07A5F"),
  plot_sub = ""
)
}
\arguments{
\item{these_sample_ids}{Data frame with sample IDs (to be plotted) in the first column.}

\item{metadata}{Optional argument, used to derive sample IDs if sample_table is Null.}

\item{these_samples_metadata}{GAMBL metadata subset to the cases you want to process.}

\item{comparison_group}{Optional argument for plotting mean alignment metrics. Default is plotting the mean for samples provided. This parameter takes a list of sample IDs.}

\item{seq_type}{Subset qc metrics to a specific seq_type, default is genome.}

\item{add_mean}{Set to TRUE to superimpose mean values of plotted variables. Default is TRUE.}

\item{add_corrected_coverage}{Set to TRUE to add corrected coverage for selected samples.}

\item{keep_cohort}{If no df with sample IDs is supplied (these_sample_ids = NULL) the function calls get_gambl_metadata and subsets on selected cohort.}

\item{keep_pathology}{If no df with sample IDs is supplied (these_sample_ids = NULL) the function calls get_gambl_metadata and subsets on selected pathology.}

\item{this_color_palette}{Optional parameter that holds the selected colours for the plotted bars.}

\item{plot_sub}{Optional parameter, add a subtitle to alignment metric plot.}
}
\value{
plot as ggplot object.
}
\description{
Visualize (stacked barplot) genomic read-subsets across a selection of samples.
}
\examples{
#Example 1 - using these_sample_ids parameter
#subset on FL cases with QC metrics available and plot
kridel_fl = get_gambl_metadata() \%>\%
 dplyr::filter(pathology == "FL", cohort == "FL_Kridel") \%>\%
 dplyr::select(sample_id) \%>\%
 pull(sample_id)

my_plot_1 = fancy_alignment_plot(these_sample_ids = kridel_fl, seq_type = "genome")

#Example 2 - using already filtered metadata (these_samples_metadata)
fl_metadata = get_gambl_metadata() \%>\%
 dplyr::filter(pathology == "FL", cohort == "FL_Kridel")

my_plot_2 = fancy_alignment_plot(these_samples_metadata = fl_metadata, seq_type = "genome")

#Example 3 - using in-house metadata fitlering options
my_plot_3 = fancy_alignment_plot(keep_cohort = "FL_Kridel", keep_pathology = "FL", seq_type = "genome")

}
