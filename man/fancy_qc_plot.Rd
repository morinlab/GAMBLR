% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/viz.R
\name{fancy_qc_plot}
\alias{fancy_qc_plot}
\title{Plot for visualizing QC metrics and allowing for grouping by different metadata columns.}
\usage{
fancy_qc_plot(
  these_samples,
  keep_cohort,
  keep_pathology,
  seq_type = "genome",
  metadata,
  these_samples_metadata,
  plot_data,
  fill_by = "pathology",
  comparison_samples,
  plot_title = "",
  plot_subtitle = "",
  y_axis_lab = "",
  return_plotdata = FALSE
)
}
\arguments{
\item{these_samples}{Data frame with sample IDs (to be plotted) in the first column (has to be named sample_id).}

\item{keep_cohort}{Optional parameter to be used when these_sample is NULL. Calls get_gambl_metadata() and filters on the cohort supplied in this parameter.}

\item{keep_pathology}{Optional parameter to be used when these_sample is NULL. Calls get_gambl_metadata() and filters on the pathology supplied in this parameter.}

\item{seq_type}{Selected seq type for incoming QC metrics.}

\item{metadata}{Optional, user can provide a metadata df to subset sample IDs from.}

\item{these_samples_metadata}{GAMBL metadata subset to the cases you want to process.}

\item{plot_data}{Plotting parameter, define the data type to be plotted.}

\item{fill_by}{Parameter for specifying fill variable for grouped bar plot. Can be any factor from incoming metadata, e.g pathology, cohort, etc.}

\item{comparison_samples}{Optional parameter, give the function a list of sample IDs to be compared against the main plotting group. Pathology is default.}

\item{plot_title}{Plotting parameter, plot title.}

\item{plot_subtitle}{Plotting parameter, subtitle of generated plot.}

\item{y_axis_lab}{Plotting parameter, label of y-axis.}

\item{return_plotdata}{Optional parameter, if set to TRUE a list of acceptable data types for plotting will be returned, and nothing else.}

\item{sort_by}{Plotting parameter, set sorting column for bar plots.}
}
\value{
plot as ggplot object.
}
\description{
Plot for visualizing QC metrics and allowing for grouping by different metadata columns.
}
\examples{
#Example 1 - using these_samples parameter
#subset on FL cases with QC metrics available and plot
kridel_fl = get_gambl_metadata() \%>\%
 dplyr::filter(pathology == "FL", cohort == "FL_Kridel") \%>\%
 dplyr::select(sample_id) \%>\%
 pull(sample_id)

my_plot_1 = fancy_qc_plot(these_samples = kridel_fl, 
                          seq_type = "genome", 
                          plot_data = "AverageBaseQuality", 
                          plot_subtitle = "Example Plot", 
                          y_axis_lab = "Average Base Quality", 
                          plot_title = "Average Base Quality For FL_Kridel")

#Example 2 - using already filtered metadata (these_samples_metadata)
fl_metadata = get_gambl_metadata() \%>\%
 dplyr::filter(pathology == "FL", cohort == "FL_Kridel")

my_plot_2 = fancy_qc_plot(these_samples_metadata = fl_metadata, 
                          seq_type = "genome", 
                          plot_data = "AverageBaseQuality", 
                          plot_subtitle = "Example Plot", 
                          y_axis_lab = "Average Base Quality", 
                          plot_title = "Average Base Quality For FL_Kridel")

#Example 3 - using in-house metadata fitlering options
my_plot_3 = fancy_qc_plot(keep_cohort = "FL_Kridel", 
                          keep_pathology = "FL", 
                          seq_type = "genome", 
                          plot_data = "AverageBaseQuality", 
                          plot_subtitle = "Example Plot", 
                          y_axis_lab = "Average Base Quality", 
                          plot_title = "Average Base Quality For FL_Kridel")

}
