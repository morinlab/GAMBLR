[
  {
    "objectID": "resources/developer-guidelines.html",
    "href": "resources/developer-guidelines.html",
    "title": "GAMBLR developer guidelines",
    "section": "",
    "text": "To ensure consistency throughout all of the packages in the GAMBLR-verse, please follow these developer guidelines. If you have any questions, please feel free to contact us or submit an issue in the corresponding repository.",
    "crumbs": [
      "GAMBLR developer guidelines"
    ]
  },
  {
    "objectID": "resources/developer-guidelines.html#name",
    "href": "resources/developer-guidelines.html#name",
    "title": "GAMBLR developer guidelines",
    "section": "Name",
    "text": "Name\nThe new functions should follow the GAMBLR-verse convention implemented and expected throughout the packaged to ensure consistency and user expectations. The maing naming conventions are:\n\nUse get_ when the function is supposed to retreive some sort of data\nUse pretty when the function is supposed to generate a plot or a multi-panel figure\nUse collate_ when the function is supposed to grow the metadata horizontally by appending new columns\nUse annotate_ when the function is supposed to annotate the data input with some additional information",
    "crumbs": [
      "GAMBLR developer guidelines"
    ]
  },
  {
    "objectID": "resources/developer-guidelines.html#title",
    "href": "resources/developer-guidelines.html#title",
    "title": "GAMBLR developer guidelines",
    "section": "Title",
    "text": "Title\nThe title displayed in the documentation is taken from the first sentence. It should be written in sentence case, not end in a full stop, and be followed by a blank line. The title is shown in various function indexes (e.g. help(package = “some_package”)) and is what the user will usually see when browsing multiple functions.",
    "crumbs": [
      "GAMBLR developer guidelines"
    ]
  },
  {
    "objectID": "resources/developer-guidelines.html#description",
    "href": "resources/developer-guidelines.html#description",
    "title": "GAMBLR developer guidelines",
    "section": "Description",
    "text": "Description\nThe description displayed in the documentation is taken from the next paragraph. It’s shown at the top of documentation and should briefly describe the most important features of the function.",
    "crumbs": [
      "GAMBLR developer guidelines"
    ]
  },
  {
    "objectID": "resources/developer-guidelines.html#details",
    "href": "resources/developer-guidelines.html#details",
    "title": "GAMBLR developer guidelines",
    "section": "Details",
    "text": "Details\nAdditional details are anything after the description. Details are optional, but can be any length so are useful if you want to dig deep into some important aspect of the function. Note that, even though the details come right after the description in the introduction, they appear much later in rendered documentation. If you want to add code to the details, this is also the sections to do so. For example, the new function relies on some bash code in order to utilize the GAMBLR code. You can detail such code here by simply adding a code block as you would in a regular markdown file.",
    "crumbs": [
      "GAMBLR developer guidelines"
    ]
  },
  {
    "objectID": "resources/developer-guidelines.html#arguments",
    "href": "resources/developer-guidelines.html#arguments",
    "title": "GAMBLR developer guidelines",
    "section": "Arguments",
    "text": "Arguments\nDetailed argument descriptions should be included for all functions. Remember to state the required data types, default values, if the argument is required or optional, etc.\nThere are several key concepts underlying the logic behind the naming of the arguments in the GAMBLR-verse. The main terms are:\n\nprojection: This is a coordinate system defining the relationship with genome build and chromosome prefixing. The argument that defines the projection should always be called projection. The main projections that are expected to be supported throughout GAMBLR-verse are grch37 and hg38. The grch37 projection contains the same coordinate system as genome build hg19, but never has the “chr” prefix on chromosome names. In contrast, the hg38 projection is always chr-prefixed and is in the same coordinate system as the hg38 genome build. As GAMBL itself and the data bundled and available or retreived through this package represents a large collection of samples sequenced both locally and externally, there is always a difficulty associated with proper handling of prefixes, different custom contigs and their lengths in the fasta reference, coordinates, and other distinctions complicating the direct comparison between data and comprehensive data analysis. These difficulties are expected to be handled internally by the function. This is done by making data always available in both projections, regardless of initial genome build to which the sample was aligned.\nmetadata: This is a data frame with a set of minimal columns defining the biological or clinical characteristics of a sample or a cohort. The argument that defines the metadata should always be called these_samples_metadata. Typically the output of the get_gambl_metadata() is provided to this argument, but you can expect that the following required columns will be present: patient_id, Tumor_Sample_Barcode, sample_id, seq_type, sex, cohort, and pathology. The main purpose of this data frame is to provide a structure for the metadata that is always expected to be available and provides linkage between unique sample identifiers and associated basic metadata values. The columns Tumor_Sample_Barcode and sample_id are expected to share the same values, but are required to be present for direct operation on the outputs of different upstream tools. When handling the metadata, you should always refer to the column sample_id for the unique sample identifiers.\nmaf: This is a data frame in a standard maf format defining the simple somatic mutations. The argument that defines the maf should always be called maf_data. Typically the output of the get_ssm* is provided to this argument, but you can expect that the standard maf columns will be present, including Tumor_Sample_Barcode, Chromosome, Start_Position, End_Position, Variant_Classification, Hugo_Symbol, etc. When handling the maf, you should always refer to the column Tumor_Sample_Barcode for the unique sample identifiers.",
    "crumbs": [
      "GAMBLR developer guidelines"
    ]
  },
  {
    "objectID": "resources/developer-guidelines.html#return",
    "href": "resources/developer-guidelines.html#return",
    "title": "GAMBLR developer guidelines",
    "section": "Return",
    "text": "Return\nSpecify the returned object, is it a data frame, a list, a vector or characters, etc.",
    "crumbs": [
      "GAMBLR developer guidelines"
    ]
  },
  {
    "objectID": "resources/developer-guidelines.html#import-specifying-dependencies",
    "href": "resources/developer-guidelines.html#import-specifying-dependencies",
    "title": "GAMBLR developer guidelines",
    "section": "Import (specifying dependencies)",
    "text": "Import (specifying dependencies)\nAlways import all the packages from which you are calling any functions outside of base R and R packages that must be loaded in order for your function to execute.\n\n\n\n\n\n\nNote\n\n\n\nRemember to not import tidyverse - rather, import the individual packages from tidyverse that the function is depending on (dplyr, readr, ggplot2 etc).\n\n\n\n\n\n\n\n\nImportant\n\n\n\nOverall, the GAMBLR already depends on many different packages that has been already added as dependencies. This results in very long installation time, frequent errors in installation and version conflicts between sub-dependencies, function name clashes, and other issues. For these and other additional reasons, addition on new dependencies is higly discouraged and is strongly adviced against! DO NOT add any new dependency that is not already a dependency of one of GAMBLR packages.",
    "crumbs": [
      "GAMBLR developer guidelines"
    ]
  },
  {
    "objectID": "resources/developer-guidelines.html#export",
    "href": "resources/developer-guidelines.html#export",
    "title": "GAMBLR developer guidelines",
    "section": "Export",
    "text": "Export\nShould this function be exported to NAMESPACE (i.e make it directly accessible for anyone who loads GAMBLR), or is the function considered to be an internal/helper function? In order to have the function populate NAMESPACE, the developer has to run devtools::document() while in the working directory of the package. All functions that have the @export line in its documentation will be documented and added to NAMESPACE.",
    "crumbs": [
      "GAMBLR developer guidelines"
    ]
  },
  {
    "objectID": "resources/developer-guidelines.html#examples",
    "href": "resources/developer-guidelines.html#examples",
    "title": "GAMBLR developer guidelines",
    "section": "Examples",
    "text": "Examples\nPlease provide fully reproducible examples for the function. Ideally, the example should demonstrate basic usage, as well as more advanced usage with different parameter combinations. Note that examples can not extend over 100 characters per line, since this will cause the lines to be truncated in the rendered PDF manual. It is advised to write your example in such a way that loading external packages are avoided as much as possible. Instead, prioritize base R as much as possible. In some cases, it is undesirable to have a function run its examples. This applies to functions that are writing files and helper functions, or functions that rely on GSC server access. To avoid any such examples to run, simply wrap the example in:\n\\dontrun{\ndo_not_run = some_function()\n}",
    "crumbs": [
      "GAMBLR developer guidelines"
    ]
  },
  {
    "objectID": "resources/developer-guidelines.html#testing-new-functions",
    "href": "resources/developer-guidelines.html#testing-new-functions",
    "title": "GAMBLR developer guidelines",
    "section": "Testing New Functions",
    "text": "Testing New Functions\nSo you have added a new function (carefully following the steps in the previous section!) and you are obviously extremely proud and eager to test it out (and let others test it). There are two different approaches to do so.\n\nOption 1\nYour first option, and likely the preferred route to take, is to make sure that the working directory in R studio is set to the GAMBLR folder with your updated code and then run devtools::load_all() to load all the functions available in the R/ folder of thee same repo. This should make all such functions available to call.\n\n\nOption 2\nAs an alternative, you can also run devtools::install() from the updated GAMBLR directory. As the name implies, this will install the complete package complete with dependencies, remotes, etc. Note, if you run with the second option, make sure to restart your R session with .rs.restartR() after installing the package and then load GAMBLR with library(GAMBLR). Now you have installed the updated branch of GAMBLR and are free to call any functions available in the R/\n\n\n\n\n\n\nNote\n\n\n\nThe behaviour of the load_all() and install() is different - make sure you understand what you are doing or please ask for help.",
    "crumbs": [
      "GAMBLR developer guidelines"
    ]
  },
  {
    "objectID": "resources/developer-guidelines.html#function-documentation-template",
    "href": "resources/developer-guidelines.html#function-documentation-template",
    "title": "GAMBLR developer guidelines",
    "section": "Function Documentation Template",
    "text": "Function Documentation Template\nFor your convenience, here is a documentation template for GAMBLR functions.\n#' @title\n#'\n#' @description\n#'\n#' @details\n#'\n#' @param a_parameter\n#' @param another_parameter\n#'\n#' @return\n#'\n#' @import\n#' @export\n#'\n#' @examples\n#' #this is an example\n#' ###For your reference, this line is exactly 100 characters. Do not exceed 100 characters per line\n#'\nfunction_name = function(a_parameter,\n                         another_parameter){\n                         }",
    "crumbs": [
      "GAMBLR developer guidelines"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GAMBLR",
    "section": "",
    "text": "Why use GAMBLR?\n  \n  \n    \n     How to install?\n  \n  \n    \n     How to use?\n  \n  \n    \n     Release notes\n  \n  \n    \n     GitHub"
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "GAMBLR",
    "section": "About",
    "text": "About\nThe GAMBLR-verse is a database, mining, manipulation and collection of a convenience functions for working with genomic data of mature B-cell lymphomas. The GAMBLR is an R package that is a wrapper providing a convenient one-stop access to load the following packages from the GAMBLR family:\n\nGAMBLR.data - a “storage unit” with different types of bundled data\nGAMBLR.helpers - a set of low-level functions for data operation\nGAMBLR.utils - higher level set of functions to operate on genomic data\nGAMBLR.viz - set of functions used mostly for visualizations\nGAMBLR.results - collection of functions to efficiently retreive data generated by LCR-modules within GAMBL project\n\n\n\n\n\n\n\nWho should use this package?\n\n\n\nThis package is for the members of Morin Lab and GAMBL consortium with approved access to the restricted access data. Please refer to GAMBLR.open for the open access published version of this package."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "GAMBLR",
    "section": "Install",
    "text": "Install\nTo install this package, we recommend doing it by accessing the latest master version directly from GitHub (requires devtools dependency).\ndevtools::install_github(\n    \"morinlab/GAMBLR\",\n    repos = BiocManager::repositories()\n)\n\n\n\n\n\n\nGot permission error at this step?\n\n\n\n\n\nPlease refer to GAMBLR.open for the open access published version of this package.\nThis error is because GAMBLR.results package is private and have restricted access. If you are the Moring Lab member or member of the GAMBL consortium, please contact Kostia or Ryan through Slack regarding this error. Be sure your GitHub ID is added to your Slack profile.\n\n\n\n\n\n\nQuickstart"
  },
  {
    "objectID": "index.html#quickstart",
    "href": "index.html#quickstart",
    "title": "GAMBLR",
    "section": "Quickstart",
    "text": "Quickstart\nThe quick and easy way to get started is to make sure the devtools dependency is installed, then install the GAMBLR and run the simplest functions to confirm successful setup:\n# Verify devtools is installed\nif (!require(\"devtools\")) install.packages(\"devtools\")\n\n# Install GAMBLR\ndevtools::install_github(\n    \"morinlab/GAMBLR\",\n    repos = BiocManager::repositories()\n)\nWe recommend restarting your R session after the installation.\nlibrary(GAMBLR)\n\n# Confirm successful setup\nmetadata &lt;- get_gambl_metadata()\nmaf &lt;- get_coding_ssm()"
  },
  {
    "objectID": "index.html#installation-for-developers",
    "href": "index.html#installation-for-developers",
    "title": "GAMBLR",
    "section": "Installation for developers",
    "text": "Installation for developers\nThe easiest way to obtain and contribute to GAMBLR is to do this via cloning the repository\ncd\ngit clone git@github.com:morinlab/GAMBLR.git\nIn your R editor of choice (which is hopefully VS Code), set your working directory to the directory you just cloned the repo into.\nsetwd(\"~/GAMBLR\")\nInstall the package in R by running the following command (requires the devtools package):\ndevtools::install()\nAfter applying your modifications to the code, use the following command to quickly test your changes without directly installing the package (requires the devtools dependency):\ndevtools::load_all()\nThe Master branch of the GAMBLR repo is protected. We welcome contributions (pull request, bug report, feature request, PR review) from all levels of users. All commits must be submitted via pull request on a branch. Please refer to the GitHub documentation for details on how to do pull request, or ask for help in the #git-help Slack channel."
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "This section will cover most of the questions you may have about GAMBLR. If there is something that is not covered, please feel free to reach out to us via GitHub by reporting an issue and we will be happy to add it to this page.",
    "crumbs": [
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "faq.html#how-to-install-gamblr",
    "href": "faq.html#how-to-install-gamblr",
    "title": "Frequently Asked Questions",
    "section": "How to install GAMBLR?",
    "text": "How to install GAMBLR?\nThe top-level members of GAMBLR family already have all GAMBLR packages setup for you as dependencies, and installing the top-level package will automatically install for you all other repositories available to you.\n\nNot in Morin Lab/GAMBL consortiumMorin Lab member\n\n\nJust run:\n# Verify devtools is installed\nif (!require(\"devtools\")) install.packages(\"devtools\")\n\n# Install GAMBLR.open\ndevtools::install_github(\n    \"morinlab/GAMBLR.open\",\n    repos = BiocManager::repositories()\n)\n\n# Load the package\nlibrary(GAMBLR.open)\nFor more information, please refer to the detailed desctiption of GAMBLR.open.\n\n\nJust run:\n# Verify devtools is installed\nif (!require(\"devtools\")) install.packages(\"devtools\")\n\n# Install GAMBLR.open\ndevtools::install_github(\n    \"morinlab/GAMBLR\",\n    repos = BiocManager::repositories()\n)\n\n# Load the package\nlibrary(GAMBLR)\n\n\n\n\n\n\nGot permission error at this step?\n\n\n\n\n\nPlease refer to GAMBLR.open for the open access published version of this package.\nThis error is because GAMBLR.results package is private and have restricted access. If you are the Moring Lab member or member of the GAMBL consortium, please contact Kostia or Ryan through Slack regarding this error. Be sure your GitHub ID is added to your Slack profile.\n\n\n\nThis will load all functionality of GAMBLR-verse and point to the data on GSC side for easy access.",
    "crumbs": [
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "faq.html#there-are-so-many-gamblr-packages-why",
    "href": "faq.html#there-are-so-many-gamblr-packages-why",
    "title": "Frequently Asked Questions",
    "section": "There are so many GAMBLR packages! Why?",
    "text": "There are so many GAMBLR packages! Why?\nOriginally, GAMBLR started as a single package GAMBLR. Since the time of it’s inception, it has signficantly grown. This resulted in the fact where scripts were 10k-long files at some points, and this in turn made it very difficult to maintain, fix bugs, implement new functionality, make improvements etc. As a side effect, it also created scenarios where users that need one specific function or data from GAMBLR had to install tons of dependencies that were actually not needed for that specific implementation, waiting hours for the resolution and installation of package dependencies and sub-dependencies. Since it mainly relied on the data available only on GSC, after hours of installation users were not able to use most of GAMBLR anyways, since they did not have access to the data and functions retreiving that data.\nFor that and other reasons, the GAMBLR was separated into specific children repositories, each serving it’s own specific purpose:\n\nNot in Morin Lab/GAMBL consortiumMorin Lab member\n\n\n\nGAMBLR.data - a “storage unit” with different types of bundled data.\nGAMBLR.helpers - a set of low-level functions for data operation.\nGAMBLR.utils - higher level set of functions to operate on genomic data.\nGAMBLR.viz - set of functions used mostly for visualizations.\nGAMBLR.predict - a collection of machine learning algorithms and functions to pre-format inputs for these models. Contains classifiers of Burkitt and Follicular lymphomas originally published, as well as reproduced of DLBCL classification by the groupings of Chapuy et al, Lacy et al, and Runge et al.\nGAMBLR.open - open-source package recommended for the community interested in lymphoma genomics research and are not members of the GAMBL consortium, or if you are waiting for your access approval but want to get started.\n\n\n\n\nGAMBLR.data - a “storage unit” with different types of bundled data.\nGAMBLR.helpers - a set of low-level functions for data operation.\nGAMBLR.utils - higher level set of functions to operate on genomic data.\nGAMBLR.viz - set of functions used mostly for visualizations.\nGAMBLR.results - set of functions used to effectively querry the outputs of different workflows and use all of the available datasets, generated both internally and externally.\nGAMBLR - an umbrella package only existing for the sole purpose of reducing the number of keystrokes and allowing you to install and use all packages listed above with single line. This package does not contain any data or functions.",
    "crumbs": [
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "faq.html#how-to-load-gamblr-to-my-session",
    "href": "faq.html#how-to-load-gamblr-to-my-session",
    "title": "Frequently Asked Questions",
    "section": "How to load GAMBLR to my session?",
    "text": "How to load GAMBLR to my session?\nAfter installation, you would load and use GAMBLR just like any other R package - using the library() call. Since the top-level GAMBLR-verse loads all of the child repos for you, there is no need to load each package separately - you can use GAMBLR with just one statement.\n\nNot in Morin Lab/GAMBL consortiumMorin Lab member\n\n\nJust run:\nlibrary(GAMBLR.open)\nThis will load all the bundled data and packages of the GAMBLR-verse available to you.\n\n\nJust run:\nlibrary(GAMBLR)\nThis will load all functionality of GAMBLR-verse and point to the data on GSC side for easy access.",
    "crumbs": [
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "faq.html#how-do-i-update-a-package-or-packages",
    "href": "faq.html#how-do-i-update-a-package-or-packages",
    "title": "Frequently Asked Questions",
    "section": "How do I update a package (or packages)?",
    "text": "How do I update a package (or packages)?\nWhile installing the top-level package is sufficient to install members of the GAMBLR-verse available to you, when the individual repo is updated, it is best to update it by installing it directly from GitHub. Since all members of the GAMBLR-verse have the same naming convention, just specify specific package you want to update after the dot. For example, to update the GAMBLR.viz to the latest version, run\n# Install GAMBLR.viz\ndevtools::install_github(\n    \"morinlab/GAMBLR.viz\",\n    repos = BiocManager::repositories()\n)\nTo install, for example, the most recent version of GAMBLR.helpers, run:\n# Install GAMBLR.helpers\ndevtools::install_github(\n    \"morinlab/GAMBLR.helpers\",\n    repos = BiocManager::repositories()\n)\n\n\n\n\n\n\nNote\n\n\n\nAfter updating the specific package in this way, it is sufficient to just load the top-level package (library(GAMBLR.open) or library(GAMBLR), depends on your access permissions) to start using the version of the GAMBLR-verse version that was just installed.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nSince the top-level package GAMBLR is just a wrapper to load all packages at once, you do not need to install or update it unless otherwise specified. It will automatically load the latest installed version, so updating the individual member is sufficient.",
    "crumbs": [
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "faq.html#where-to-clone-gamblr-repos",
    "href": "faq.html#where-to-clone-gamblr-repos",
    "title": "Frequently Asked Questions",
    "section": "Where to clone GAMBLR repos?",
    "text": "Where to clone GAMBLR repos?",
    "crumbs": [
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "faq.html#where-should-i-run-gamblr",
    "href": "faq.html#where-should-i-run-gamblr",
    "title": "Frequently Asked Questions",
    "section": "Where should I run GAMBLR?",
    "text": "Where should I run GAMBLR?",
    "crumbs": [
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "faq.html#what-is-config",
    "href": "faq.html#what-is-config",
    "title": "Frequently Asked Questions",
    "section": "What is config?",
    "text": "What is config?",
    "crumbs": [
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "faq.html#checkout-branch-to-run-pr-review-tests",
    "href": "faq.html#checkout-branch-to-run-pr-review-tests",
    "title": "Frequently Asked Questions",
    "section": "Checkout branch to run PR review tests",
    "text": "Checkout branch to run PR review tests",
    "crumbs": [
      "Frequently Asked Questions"
    ]
  }
]